/**
 * Generated by orval v6.20.0 🍺
 * Do not edit manually.
 * Block list
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { AccountDto, PatchAccountDto } from ".././models";
import { createInstance } from "../../api-instance";
import type { ErrorType, BodyType } from "../../api-instance";

export const accountControllerGetAccount = (signal?: AbortSignal) => {
  return createInstance<AccountDto>({ url: `/account`, method: "get", signal });
};

export const getAccountControllerGetAccountQueryKey = () => {
  return [`/account`] as const;
};

export const getAccountControllerGetAccountInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof accountControllerGetAccount>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetAccount>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAccountControllerGetAccountQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof accountControllerGetAccount>>
  > = ({ signal }) => accountControllerGetAccount(signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetAccount>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AccountControllerGetAccountInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccount>>
>;
export type AccountControllerGetAccountInfiniteQueryError = ErrorType<unknown>;

export const useAccountControllerGetAccountInfinite = <
  TData = Awaited<ReturnType<typeof accountControllerGetAccount>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetAccount>>,
    TError,
    TData
  >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getAccountControllerGetAccountInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAccountControllerGetAccountQueryOptions = <
  TData = Awaited<ReturnType<typeof accountControllerGetAccount>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetAccount>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAccountControllerGetAccountQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof accountControllerGetAccount>>
  > = ({ signal }) => accountControllerGetAccount(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetAccount>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AccountControllerGetAccountQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccount>>
>;
export type AccountControllerGetAccountQueryError = ErrorType<unknown>;

export const useAccountControllerGetAccount = <
  TData = Awaited<ReturnType<typeof accountControllerGetAccount>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetAccount>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAccountControllerGetAccountQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const accountControllerPathAccount = (
  patchAccountDto: BodyType<PatchAccountDto>,
) => {
  return createInstance<PatchAccountDto>({
    url: `/account`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: patchAccountDto,
  });
};

export const getAccountControllerPathAccountMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountControllerPathAccount>>,
    TError,
    { data: BodyType<PatchAccountDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountControllerPathAccount>>,
  TError,
  { data: BodyType<PatchAccountDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountControllerPathAccount>>,
    { data: BodyType<PatchAccountDto> }
  > = (props) => {
    const { data } = props ?? {};

    return accountControllerPathAccount(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountControllerPathAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPathAccount>>
>;
export type AccountControllerPathAccountMutationBody =
  BodyType<PatchAccountDto>;
export type AccountControllerPathAccountMutationError = ErrorType<unknown>;

export const useAccountControllerPathAccount = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountControllerPathAccount>>,
    TError,
    { data: BodyType<PatchAccountDto> },
    TContext
  >;
}) => {
  const mutationOptions =
    getAccountControllerPathAccountMutationOptions(options);

  return useMutation(mutationOptions);
};
