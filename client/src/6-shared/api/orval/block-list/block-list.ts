/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Block list
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  BlockListDto,
  BlockListControllerGetListParams,
  BlockItemDto,
  AddBlockItemDto,
} from ".././models";
import { createInstance } from "../../api-instance";
import type { ErrorType, BodyType } from "../../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const blockListControllerGetList = (
  params?: BlockListControllerGetListParams,
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  return createInstance<BlockListDto>(
    { url: `/block-list`, method: "get", params, signal },
    options,
  );
};

export const getBlockListControllerGetListQueryKey = (
  params?: BlockListControllerGetListParams,
) => [`/block-list`, ...(params ? [params] : [])] as const;

export const getBlockListControllerGetListInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof blockListControllerGetList>>,
  TError = ErrorType<unknown>,
>(
  params?: BlockListControllerGetListParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof blockListControllerGetList>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseInfiniteQueryOptions<
  Awaited<ReturnType<typeof blockListControllerGetList>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getBlockListControllerGetListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof blockListControllerGetList>>
  > = ({ signal }) =>
    blockListControllerGetList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type BlockListControllerGetListInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerGetList>>
>;
export type BlockListControllerGetListInfiniteQueryError = ErrorType<unknown>;

export const useBlockListControllerGetListInfinite = <
  TData = Awaited<ReturnType<typeof blockListControllerGetList>>,
  TError = ErrorType<unknown>,
>(
  params?: BlockListControllerGetListParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof blockListControllerGetList>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getBlockListControllerGetListInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getBlockListControllerGetListQueryOptions = <
  TData = Awaited<ReturnType<typeof blockListControllerGetList>>,
  TError = ErrorType<unknown>,
>(
  params?: BlockListControllerGetListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof blockListControllerGetList>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof blockListControllerGetList>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getBlockListControllerGetListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof blockListControllerGetList>>
  > = ({ signal }) =>
    blockListControllerGetList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type BlockListControllerGetListQueryResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerGetList>>
>;
export type BlockListControllerGetListQueryError = ErrorType<unknown>;

export const useBlockListControllerGetList = <
  TData = Awaited<ReturnType<typeof blockListControllerGetList>>,
  TError = ErrorType<unknown>,
>(
  params?: BlockListControllerGetListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof blockListControllerGetList>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof createInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getBlockListControllerGetListQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const blockListControllerAddBlockListItem = (
  addBlockItemDto: BodyType<AddBlockItemDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<BlockItemDto>(
    {
      url: `/block-list/item`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: addBlockItemDto,
    },
    options,
  );
};

export const getBlockListControllerAddBlockListItemMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof blockListControllerAddBlockListItem>>,
    TError,
    { data: BodyType<AddBlockItemDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof blockListControllerAddBlockListItem>>,
  TError,
  { data: BodyType<AddBlockItemDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof blockListControllerAddBlockListItem>>,
    { data: BodyType<AddBlockItemDto> }
  > = (props) => {
    const { data } = props ?? {};

    return blockListControllerAddBlockListItem(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type BlockListControllerAddBlockListItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerAddBlockListItem>>
>;
export type BlockListControllerAddBlockListItemMutationBody =
  BodyType<AddBlockItemDto>;
export type BlockListControllerAddBlockListItemMutationError =
  ErrorType<unknown>;

export const useBlockListControllerAddBlockListItem = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof blockListControllerAddBlockListItem>>,
    TError,
    { data: BodyType<AddBlockItemDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const mutationOptions =
    getBlockListControllerAddBlockListItemMutationOptions(options);

  return useMutation(mutationOptions);
};
export const blockListControllerRemoveBlockItem = (
  id: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<BlockItemDto>(
    { url: `/block-list/item/${id}`, method: "delete" },
    options,
  );
};

export const getBlockListControllerRemoveBlockItemMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof blockListControllerRemoveBlockItem>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof blockListControllerRemoveBlockItem>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof blockListControllerRemoveBlockItem>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return blockListControllerRemoveBlockItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type BlockListControllerRemoveBlockItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof blockListControllerRemoveBlockItem>>
>;

export type BlockListControllerRemoveBlockItemMutationError =
  ErrorType<unknown>;

export const useBlockListControllerRemoveBlockItem = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof blockListControllerRemoveBlockItem>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const mutationOptions =
    getBlockListControllerRemoveBlockItemMutationOptions(options);

  return useMutation(mutationOptions);
};
