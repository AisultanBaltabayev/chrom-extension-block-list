/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Block list
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { SignUpBodyDto, SignInBodyDto, SessionInfoDto } from ".././models";
import { createInstance } from "../../api-instance";
import type { ErrorType, BodyType } from "../../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const authControllerSignUp = (
  signUpBodyDto: BodyType<SignUpBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-up`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: signUpBodyDto,
    },
    options,
  );
};

export const getAuthControllerSignUpMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignUp>>,
    TError,
    { data: BodyType<SignUpBodyDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSignUp>>,
  TError,
  { data: BodyType<SignUpBodyDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignUp>>,
    { data: BodyType<SignUpBodyDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerSignUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSignUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSignUpMutationBody = BodyType<SignUpBodyDto>;
export type AuthControllerSignUpMutationError = ErrorType<unknown>;

export const useAuthControllerSignUp = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignUp>>,
    TError,
    { data: BodyType<SignUpBodyDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const mutationOptions = getAuthControllerSignUpMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authControllerSignIn = (
  signInBodyDto: BodyType<SignInBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-in`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: signInBodyDto,
    },
    options,
  );
};

export const getAuthControllerSignInMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignIn>>,
    TError,
    { data: BodyType<SignInBodyDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSignIn>>,
  TError,
  { data: BodyType<SignInBodyDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignIn>>,
    { data: BodyType<SignInBodyDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerSignIn(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignInMutationBody = BodyType<SignInBodyDto>;
export type AuthControllerSignInMutationError = ErrorType<unknown>;

export const useAuthControllerSignIn = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignIn>>,
    TError,
    { data: BodyType<SignInBodyDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const mutationOptions = getAuthControllerSignInMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authControllerSignOut = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/sign-out`, method: "post" },
    options,
  );
};

export const getAuthControllerSignOutMutationOptions = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignOut>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSignOut>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignOut>>,
    TVariables
  > = () => {
    return authControllerSignOut(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSignOutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;

export type AuthControllerSignOutMutationError = ErrorType<unknown>;

export const useAuthControllerSignOut = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignOut>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const mutationOptions = getAuthControllerSignOutMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authControllerGetSessionInfo = (
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  return createInstance<SessionInfoDto>(
    { url: `/auth/session`, method: "get", signal },
    options,
  );
};

export const getAuthControllerGetSessionInfoQueryKey = () =>
  [`/auth/session`] as const;

export const getAuthControllerGetSessionInfoInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGetSessionInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof authControllerGetSessionInfo>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseInfiniteQueryOptions<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGetSessionInfoQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGetSessionInfo>>
  > = ({ signal }) => authControllerGetSessionInfo(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthControllerGetSessionInfoInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type AuthControllerGetSessionInfoInfiniteQueryError = ErrorType<unknown>;

export const useAuthControllerGetSessionInfoInfinite = <
  TData = Awaited<ReturnType<typeof authControllerGetSessionInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof authControllerGetSessionInfo>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getAuthControllerGetSessionInfoInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAuthControllerGetSessionInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGetSessionInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGetSessionInfo>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGetSessionInfoQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGetSessionInfo>>
  > = ({ signal }) => authControllerGetSessionInfo(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthControllerGetSessionInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type AuthControllerGetSessionInfoQueryError = ErrorType<unknown>;

export const useAuthControllerGetSessionInfo = <
  TData = Awaited<ReturnType<typeof authControllerGetSessionInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGetSessionInfo>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthControllerGetSessionInfoQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
