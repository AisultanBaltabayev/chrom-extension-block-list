/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Block list
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { AccountDto, PatchAccountDto } from ".././models";
import { createInstance } from "../../api-instance";
import type { ErrorType, BodyType } from "../../api-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const accountControllerGetAccount = (
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  return createInstance<AccountDto>(
    { url: `/account`, method: "get", signal },
    options,
  );
};

export const getAccountControllerGetAccountQueryKey = () =>
  [`/account`] as const;

export const getAccountControllerGetAccountInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof accountControllerGetAccount>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetAccount>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseInfiniteQueryOptions<
  Awaited<ReturnType<typeof accountControllerGetAccount>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAccountControllerGetAccountQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof accountControllerGetAccount>>
  > = ({ signal }) => accountControllerGetAccount(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AccountControllerGetAccountInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccount>>
>;
export type AccountControllerGetAccountInfiniteQueryError = ErrorType<unknown>;

export const useAccountControllerGetAccountInfinite = <
  TData = Awaited<ReturnType<typeof accountControllerGetAccount>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetAccount>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getAccountControllerGetAccountInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAccountControllerGetAccountQueryOptions = <
  TData = Awaited<ReturnType<typeof accountControllerGetAccount>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetAccount>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof accountControllerGetAccount>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAccountControllerGetAccountQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof accountControllerGetAccount>>
  > = ({ signal }) => accountControllerGetAccount(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AccountControllerGetAccountQueryResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccount>>
>;
export type AccountControllerGetAccountQueryError = ErrorType<unknown>;

export const useAccountControllerGetAccount = <
  TData = Awaited<ReturnType<typeof accountControllerGetAccount>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof accountControllerGetAccount>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAccountControllerGetAccountQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const accountControllerPathAccount = (
  patchAccountDto: BodyType<PatchAccountDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<PatchAccountDto>(
    {
      url: `/account`,
      method: "patch",
      headers: { "Content-Type": "application/json" },
      data: patchAccountDto,
    },
    options,
  );
};

export const getAccountControllerPathAccountMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountControllerPathAccount>>,
    TError,
    { data: BodyType<PatchAccountDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof accountControllerPathAccount>>,
  TError,
  { data: BodyType<PatchAccountDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof accountControllerPathAccount>>,
    { data: BodyType<PatchAccountDto> }
  > = (props) => {
    const { data } = props ?? {};

    return accountControllerPathAccount(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AccountControllerPathAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPathAccount>>
>;
export type AccountControllerPathAccountMutationBody =
  BodyType<PatchAccountDto>;
export type AccountControllerPathAccountMutationError = ErrorType<unknown>;

export const useAccountControllerPathAccount = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof accountControllerPathAccount>>,
    TError,
    { data: BodyType<PatchAccountDto> },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const mutationOptions =
    getAccountControllerPathAccountMutationOptions(options);

  return useMutation(mutationOptions);
};
